<?php

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Psr\Http\Message\ResponseFactoryInterface;

/**
 * PSR-15 compatible middleware that invokes an action based on the route attributes of the server request.
 *
 * This file is generated by SwitchRoute.
 * Do not modify it manually. Any changes will be overwritten.
 */
class InvokeMiddleware implements MiddlewareInterface
{
    /**
     * @var ResponseFactoryInterface
     */
    protected $responseFactory;

    public function __construct(ResponseFactoryInterface $responseFactory)
    {
        $this->responseFactory = $responseFactory;
    }

    /**
     * The default action for when no route matches.
     */
    protected function notFound(ServerRequestInterface $request): ResponseInterface
    {
        $allowedMethods = $request->getAttribute('route:allowed_methods', []);

        if ($allowedMethods === []) {
            $response = $this->responseFactory->createResponse(404)
                ->withHeader('Content-Type', 'text/plain');
            $response->getBody()->write('Not Found');
        } else {
            $response = $this->responseFactory->createResponse(405)
                ->withHeader('Content-Type', 'text/plain')
                ->withHeader('Allow', join(', ', $allowedMethods));
            $response->getBody()->write('Method Not Allowed');
        }

        return $response;
    }

    /**
     * Process an incoming server request.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        if ($request->getAttribute('route:include', null) !== null) {
            require $request->getAttribute('route:include');
        }

        $controller = $request->getAttribute('route:controller', '');
        $action = $request->getAttribute('route:action', '');

        switch ($controller) {
            case 'info':
                switch ($action) {
                    case '':
                        return call('info', '', $request->getAttribute('route:{id}', NULL));
                }
                break;
            case 'user':
                switch ($action) {
                    case 'list':
                        return call('user', 'list', $request->getAttribute('route:{id}', NULL));
                    case 'add':
                        return call('user', 'add', $request->getAttribute('route:{id}', NULL));
                    case 'get':
                        return call('user', 'get', $request->getAttribute('route:{id}', NULL));
                    case 'update':
                        return call('user', 'update', $request->getAttribute('route:{id}', NULL));
                    case 'delete':
                        return call('user', 'delete', $request->getAttribute('route:{id}', NULL));
                }
                break;
            case '':
                switch ($action) {
                    case 'list-photos':
                        return call('', 'list-photos', $request->getAttribute('route:{id}', NULL));
                    case 'add-photos':
                        return call('', 'add-photos', $request->getAttribute('route:{id}', NULL));
                    case 'not-found':
                        return call('', 'not-found', $request->getAttribute('route:{id}', NULL));
                    case '':
                        return $this->notFound($request);
                }
                break;
        }
    }
}